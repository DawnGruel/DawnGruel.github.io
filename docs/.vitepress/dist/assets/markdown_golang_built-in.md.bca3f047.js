import{_ as t,o as a,c as l,O as e}from"./chunks/framework.1156b012.js";const A=JSON.parse('{"title":"Golang内置类型和函数","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/golang/built-in.md","filePath":"markdown/golang/built-in.md"}'),s={name:"markdown/golang/built-in.md"},n=e(`<h1 id="golang内置类型和函数" tabindex="-1">Golang内置类型和函数 <a class="header-anchor" href="#golang内置类型和函数" aria-label="Permalink to &quot;Golang内置类型和函数&quot;">​</a></h1><h2 id="内置类型" tabindex="-1">内置类型 <a class="header-anchor" href="#内置类型" aria-label="Permalink to &quot;内置类型&quot;">​</a></h2><h3 id="值类型" tabindex="-1">值类型 <a class="header-anchor" href="#值类型" aria-label="Permalink to &quot;值类型&quot;">​</a></h3><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">bool</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">int</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;"> or </span><span style="color:#F78C6C;">64</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int8</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int16</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int32</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int64</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">uint</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;"> or </span><span style="color:#F78C6C;">64</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">uint8</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint16</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint64</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">float32</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float64</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">complex64</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">complex128</span></span>
<span class="line"><span style="color:#A6ACCD;">    array    </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> 固定长度的数组</span></span></code></pre></div><h3 id="引用类型-指针类型" tabindex="-1">引用类型：(指针类型) <a class="header-anchor" href="#引用类型-指针类型" aria-label="Permalink to &quot;引用类型：(指针类型)&quot;">​</a></h3><h2 id="内置函数" tabindex="-1">内置函数 <a class="header-anchor" href="#内置函数" aria-label="Permalink to &quot;内置函数&quot;">​</a></h2><p>Go 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len、cap 和 append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。</p><table><thead><tr><th style="text-align:center;">操作指令</th><th style="text-align:left;">描述</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:center;">append</td><td style="text-align:left;">用来追加元素到数组、slice中, 返回修改后的数组、slice</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">close</td><td style="text-align:left;">主要用来关闭channel</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">delete</td><td style="text-align:left;">从map中删除key对应的value</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">panic</td><td style="text-align:left;">停止常规的goroutine</td><td style="text-align:left;">panic和recover：用来做错误处理</td></tr><tr><td style="text-align:center;">recover</td><td style="text-align:left;">允许程序定义goroutine的panic动作</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">imag</td><td style="text-align:left;">返回complex的实部</td><td style="text-align:left;">complex、real imag：用于创建和操作复数</td></tr><tr><td style="text-align:center;">real</td><td style="text-align:left;">返回complex的虚部</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">make</td><td style="text-align:left;">用来分配内存，返回Type本身</td><td style="text-align:left;">只能应用于slice, map, channel</td></tr><tr><td style="text-align:center;">new</td><td style="text-align:left;">用来分配内存，主要用来分配值类型，比如int、struct。返回指向Type的指针</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">cap</td><td style="text-align:left;">capacity是容量的意思，用于返回某个类型的最大容量</td><td style="text-align:left;">只能用于切片和 map</td></tr><tr><td style="text-align:center;">copy</td><td style="text-align:left;">用于复制和连接slice，返回复制的数目</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">len</td><td style="text-align:left;">来求长度，比如string、array、slice、map、channel ，返回长度</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">print、println</td><td style="text-align:left;">底层打印函数，在部署环境中建议使用 fmt 包</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="内置接口error" tabindex="-1">内置接口error <a class="header-anchor" href="#内置接口error" aria-label="Permalink to &quot;内置接口error&quot;">​</a></h2><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">error</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//只要实现了Error()函数，返回值为String的都实现了err接口</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">Error</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// String</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,10),o=[n];function r(p,c,i,d,y,C){return a(),l("div",null,o)}const D=t(s,[["render",r]]);export{A as __pageData,D as default};
