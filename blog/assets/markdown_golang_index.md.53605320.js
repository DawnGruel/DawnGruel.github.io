import{_ as a,o as s,c as e,X as n}from"./chunks/framework.6bc268d3.js";const g=JSON.parse('{"title":"Golang学习指南","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/golang/index.md","filePath":"markdown/golang/index.md","lastUpdated":1693191555000}'),l={name:"markdown/golang/index.md"},t=n(`<h1 id="golang学习指南" tabindex="-1">Golang学习指南 <a class="header-anchor" href="#golang学习指南" aria-label="Permalink to &quot;Golang学习指南&quot;">​</a></h1><ul><li>Golang官网地址：<a href="https://golang.org" target="_blank" rel="noreferrer">https://golang.org</a></li><li>Golang官方文档：<a href="https://golang.org/doc" target="_blank" rel="noreferrer">https://golang.org/doc</a></li><li>Golang中文网：<a href="https://studygolang.com" target="_blank" rel="noreferrer">https://studygolang.com</a></li><li>Golang中文文档：<a href="http://docscn.studygolang.com" target="_blank" rel="noreferrer">http://docscn.studygolang.com</a></li><li>Golang Packages:<a href="https://golang.org/pkg" target="_blank" rel="noreferrer">https://golang.org/pkg</a></li><li>Golang中文Packages：<a href="https://studygolang.com/pkgdoc" target="_blank" rel="noreferrer">https://studygolang.com/pkgdoc</a></li></ul><p>各种Go文档：<a href="https://learnku.com/" target="_blank" rel="noreferrer">https://learnku.com/</a> 觉得好用的文档地址哦</p><h2 id="学习相关链接" tabindex="-1">学习相关链接 <a class="header-anchor" href="#学习相关链接" aria-label="Permalink to &quot;学习相关链接&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">模块</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://www.topgoer.com/gin%E6%A1%86%E6%9E%B6/%E7%AE%80%E4%BB%8B.html" target="_blank" rel="noreferrer">Gin框架</a></td><td style="text-align:left;">webApi框架</td></tr><tr><td style="text-align:center;"><a href="./other/fmt.html">fmt</a></td><td style="text-align:left;">go包，格式化输出</td></tr><tr><td style="text-align:center;"><a href="https://learnku.com/articles/56426" target="_blank" rel="noreferrer">goDoc</a></td><td style="text-align:left;">工具会从 Go 程序和包文件中提取顶级声明的首行注释以及每个对象的相关注释，并生成相关文档</td></tr><tr><td style="text-align:center;"><a href="./other/air.html">Air使用指南</a></td><td style="text-align:left;">在<strong>Go</strong>语言开发中实现热重启</td></tr><tr><td style="text-align:center;"><a href="https://learnku.com/docs/gorm/v2/index/9728" target="_blank" rel="noreferrer">Grom</a></td><td style="text-align:left;">一个神奇的，对开发人员友好的 Golang ORM 库</td></tr><tr><td style="text-align:center;"><a href="https://github.com/spf13/viper#section-readme" target="_blank" rel="noreferrer">viper</a></td><td style="text-align:left;">一个完整的 Go 应用程序配置解决方案</td></tr><tr><td style="text-align:center;">[cobra]</td><td style="text-align:left;">是一个 Go 语言开发的命令行（CLI）框架，它提供了简洁、灵活且强大的方式来创建命令行程序。</td></tr><tr><td style="text-align:center;"><a href="./other/yaml.html">YAML</a></td><td style="text-align:left;">YAML是一种流行的格式，用于以人类友好的格式序列化数据, 类似JSON但更易于阅读。</td></tr></tbody></table><h2 id="文件名" tabindex="-1">文件名 <a class="header-anchor" href="#文件名" aria-label="Permalink to &quot;文件名&quot;">​</a></h2><p>Go 的源文件以 <code>.go</code> 为后缀名存储在计算机中，这些文件名均由小写字母组成，如 <code>main.go</code> 。如果文件名由多个部分组成，则使用下划线 <code>_</code> 对它们进行分隔，如 <code>main_test.go</code> 。文件名不包含空格或其他特殊字符。</p><p>一个源文件可以包含任意多行的代码，Go 本身没有对源文件的大小进行限制。</p><h2 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-label="Permalink to &quot;标识符&quot;">​</a></h2><p>你会发现在 Go 代码中的几乎所有东西都有一个名称或标识符。另外，Go 语言也是区分大小写的，这与 C 家族中的其它语言相同。有效的标识符必须以字符（可以使用任何 UTF-8 编码的字符或 _）开头，然后紧跟着 0 个或多个字符或 Unicode 数字，如：X56、group1、_x23、i、өԑ12。</p><p>以下是无效的标识符：</p><blockquote><ul><li>1ab（以数字开头）</li><li>case（Go 语言的关键字）</li><li>a+b（运算符是不允许的）</li></ul></blockquote><h2 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-label="Permalink to &quot;关键字&quot;">​</a></h2><p>Go只有25个关键字</p><div class="language-Go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">select</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;font-style:italic;">defer</span><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">go</span><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">map</span><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">struct</span></span>
<span class="line"><span style="color:#89DDFF;">chan</span><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;font-style:italic;">goto</span><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">switch</span></span>
<span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">fallthrough</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#FFCB6B;">continue</span><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">       return       </span><span style="color:#89DDFF;">var</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>之所以刻意地将 Go 代码中的关键字保持的这么少，是为了简化在编译过程第一步中的代码解析。和其它语言一样，关键字不能够作标识符使用。</p><h2 id="保留字" tabindex="-1">保留字 <a class="header-anchor" href="#保留字" aria-label="Permalink to &quot;保留字&quot;">​</a></h2><p>Go还有37个保留字</p><div class="language-Go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Constants</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">false</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">iota</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Types</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int8</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int16</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int32</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int64</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#C792EA;">uint</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">uint8</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">uint16</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">uint32</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">uint64</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">uintptr</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#C792EA;">float32</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">float64</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">complex128</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">complex64</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">rune</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Functions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">   make  len  cap  new  append  copy  close  delete</span></span>
<span class="line"><span style="color:#A6ACCD;">             complex  real  imag</span></span>
<span class="line"><span style="color:#A6ACCD;">             panic  recover</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="可见性" tabindex="-1">可见性 <a class="header-anchor" href="#可见性" aria-label="Permalink to &quot;可见性&quot;">​</a></h2><p>1）声明在函数内部，是函数的本地值，类似private</p><p>2）声明在函数外部，是对当前包可见(包内所有.go文件都可见)的全局值，类似protect</p><p>3）声明在函数外部且首字母大写是所有包可见的全局值,类似public</p><h2 id="程序的组成" tabindex="-1">程序的组成 <a class="header-anchor" href="#程序的组成" aria-label="Permalink to &quot;程序的组成&quot;">​</a></h2><p>程序一般由关键字、常量、变量、运算符、类型和函数组成。</p><p>程序中可能会使用到这些分隔符：括号 <code>()</code> ，中括号 <code>[]</code> 和大括号 <code>{}</code> 。</p><p>程序中可能会使用到这些标点符号：<code>.</code>、<code>,</code> 、<code>;</code> 、<code>:</code> 和 <code>…</code>。</p><p>程序的代码通过语句来实现结构化。每个语句不需要像 C 家族中的其它语言一样以分号 <code>;</code> 结尾，因为这些工作都将由 Go 编译器自动完成。</p><p>如果你打算将多个语句写在同一行，它们则必须使用 <code>;</code> 人为区分，但在实际开发中我们并不鼓励这种做法。</p><h2 id="go语言声明" tabindex="-1">Go语言声明 <a class="header-anchor" href="#go语言声明" aria-label="Permalink to &quot;Go语言声明&quot;">​</a></h2><p>有四种主要声明方式：</p><blockquote><p>var（声明变量）<br> const（声明常量）<br> type（声明类型）<br> func（声明函数）</p></blockquote><p>Go的程序是保存在多个.go文件中，文件的第一行就是package XXX声明，用来说明该文件属于哪个包(package)，package声明下来就是import声明，再下来是类型，变量，常量，函数的声明。</p><h2 id="go项目构建及编译" tabindex="-1">Go项目构建及编译 <a class="header-anchor" href="#go项目构建及编译" aria-label="Permalink to &quot;Go项目构建及编译&quot;">​</a></h2><p>一个Go工程中主要包含以下三个目录：</p><blockquote><p>src：源代码文件<br> pkg：包文件<br> bin：相关bin文件</p></blockquote><h2 id="编译调试包" tabindex="-1">编译调试包 <a class="header-anchor" href="#编译调试包" aria-label="Permalink to &quot;编译调试包&quot;">​</a></h2><blockquote><p>go build examplepackage<br> go test examplepackage<br> go install examplepackage</p></blockquote>`,38),o=[t];function p(r,c,i,d,y,C){return s(),e("div",null,o)}const h=a(l,[["render",p]]);export{g as __pageData,h as default};
