import{_ as o,o as n,c as a,k as e,a as t}from"./chunks/framework.6bc268d3.js";const x=JSON.parse('{"title":"Go 运行时（runtime）","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/golang/other/runtime.md","filePath":"markdown/golang/other/runtime.md","lastUpdated":null}'),r={name:"markdown/golang/other/runtime.md"},i=e("h1",{id:"go-运行时-runtime",tabindex:"-1"},[t("Go 运行时（runtime） "),e("a",{class:"header-anchor",href:"#go-运行时-runtime","aria-label":'Permalink to "Go 运行时（runtime）"'},"​")],-1),s=e("p",null,"尽管 Go 编译器产生的是本地可执行代码，然而这些代码仍旧运行在 Go 的 runtime（这部分的代码可以在 runtime 包中找到）当中。这个 runtime 类似 Java 和 .NET 语言所用到的虚拟机，它负责管理包括内存分配、垃圾回收（第 11.8 节）、栈处理、goroutine、channel、切片（slice）、map 和反射（reflection）等等。",-1),c=e("p",null,[t("runtime 主要由 C 语言编写（自 Go 1.5 起开始自举），并且是每个 Go 包的最顶级包。你可以在目录 "),e("code",null,"$GOROOT/src/runtime"),t(" 中找到相关内容。")],-1),l=e("p",null,"垃圾回收器 Go 拥有简单却高效的标记 - 清除回收器。它的主要思想来源于 IBM 的可复用垃圾回收器，旨在打造一个高效、低延迟的并发回收器。目前 gccgo 还没有回收器，同时适用于 gc 和 gccgo 的新回收器正在研发中。使用一门具有垃圾回收功能的编程语言不代表你可以避免内存分配所带来的问题，分配和回收内容都是消耗 CPU 资源的一种行为。",-1),m=e("p",null,"Go 的可执行文件都比相对应的源代码文件要大很多，这恰恰说明了 Go 的 runtime 嵌入到了每一个可执行文件当中。当然，在部署到数量巨大的集群时，较大的文件体积也是比较头疼的问题。但总得来说，Go 的部署工作还是要比 Java 和 Python 轻松得多。因为 Go 不需要依赖任何其它文件，它只需要一个单独的静态文件，这样你也不会像使用其它语言一样被各种不同版本的依赖文件混淆。",-1),d=[i,s,c,l,m];function u(_,h,p,g,G,f){return n(),a("div",null,d)}const P=o(r,[["render",u]]);export{x as __pageData,P as default};
