import{_ as s,o as a,c as n,X as e}from"./chunks/framework.6bc268d3.js";const u=JSON.parse('{"title":"函数与类型","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/golang/function&types.md","filePath":"markdown/golang/function&types.md","lastUpdated":null}'),l={name:"markdown/golang/function&types.md"},p=e(`<h1 id="函数与类型" tabindex="-1">函数与类型 <a class="header-anchor" href="#函数与类型" aria-label="Permalink to &quot;函数与类型&quot;">​</a></h1><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><p>这是定义一个函数最简单的格式：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">functionName</span><span style="color:#89DDFF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>你可以在括号 <code>()</code> 中写入 0 个或多个函数的参数（使用逗号 <code>,</code> 分隔），<strong>每个参数的名称后面必须紧跟着该参数的类型</strong>。</p><p>函数里的代码（函数体）使用大括号 <code>{}</code> 括起来。</p><p>左大括号 <code>{</code> 必须与方法的声明放在同一行，这是编译器的<strong>强制规定</strong>，否则你在使用 gofmt 时就会出现错误提示：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">build-error:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">syntax</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">error:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">unexpected</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">semicolon</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">newline</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">before</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>（这是因为编译器会产生 func main() ; 这样的结果，很明显这错误的）</p></blockquote><p><strong>Go 语言虽然看起来不使用分号作为语句的结束，但实际上这一过程是由编译器自动完成，因此才会引发像上面这样的错误</strong><br> 右大括号 <code>}</code> 需要被放在紧接着函数体的下一行。如果你的函数非常简短，你也可以将它们放在同一行：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Sum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>对于大括号 <code>{}</code> 的使用规则在任何时候都是相同的（如：if 语句等）。</p><p>因此符合规范的函数一般写成如下的形式：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">functionName</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">parameter_list</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">return_value_list</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   …</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中：</p><blockquote><ul><li>parameter_list 的形式为 (param1 type1, param2 type2, …)</li><li>return_value_list 的形式为 (ret1 type1, ret2 type2, …)</li></ul></blockquote><p>只有当某个函数需要被外部包调用的时候才使用大写字母开头，并遵循 [Pascal命名法]；</p><div class="info custom-block"><p class="custom-block-title">Pascal命名法</p><p>指当变量名和函式名称是由二个或二个以上单词连结在一起，每个单词首字母大写。而构成的唯一识别字时，用以增加变量和函式的可读性。</p></div><p>否则就遵循骆驼命名法，即第一个单词的首字母小写，其余单词的首字母大写。</p><p>下面这一行调用了 <code>fmt</code> 包中的 <code>Println</code> 函数，可以将字符串输出到控制台，并在最后自动增加换行字符 <code>\\n</code> ：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Println（</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello, world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当被调用函数的代码执行到结束符 <code>}</code> 或返回语句时就会返回，然后程序继续执行调用该函数之后的代码。</p><h2 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h2><p>可以包含数据的变量（或常量），可以使用不同的数据类型或类型来保存数据。使用 var 声明的变量的值会自动初始化为该类型的零值。类型定义了某个变量的值的集合与可对其进行操作的集合。</p><p>类型可以是基本类型，如： <code>int</code> 、 <code>float</code> 、 <code>bool</code> 、 <code>string</code></p><p>结构化的（复合的），如： <code>struct</code> 、 <code>array</code> 、 <code>slice</code> 、 <code>map</code> 、 <code>channel</code></p><p>只描述类型的行为的，如： <code>interface</code></p><p>结构化的类型没有真正的值，它使用 nil 作为默认值（在 Objective-C 中是 nil，在 Java 中是 null，在 C 和 C++ 中是 NULL 或 0）。值得注意的是，Go 语言中不存在类型继承。</p><p>函数也可以是一个确定的类型，就是以函数作为返回类型。这种类型的声明要写在函数名和可选的参数列表之后，例如：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> FunctionName </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a typea</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b typeb</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> typeFunc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>你可以在函数体中的某处返回使用类型为 typeFunc 的变量 var： <code>return var</code></p><p>一个函数可以拥有多返回值，返回类型之间需要使用逗号分割，并使用小括号 <code>()</code> 将它们括起来，如：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> FunctionName </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a typea</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b typeb</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">t1 type1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> t2 type2</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>返回值形式： <code>return var1, var2</code></p><p>使用 <code>type</code> 关键字可以定义你自己的类型，你可能想要定义一个[结构体]，但是也可以定义一个已经存在的类型的别名，如：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IZ</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>这里并不是真正意义上的别名，因为使用这种方法定义之后的类型可以拥有更多的特性，且在类型转换时必须显式转换。</strong></p><p>如果你有多个类型需要定义，可以使用因式分解关键字的方式，例如：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">   IZ </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">   FZ </span><span style="color:#C792EA;">float64</span></span>
<span class="line"><span style="color:#A6ACCD;">   STR </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>每个值都必须在经过编译后属于某个类型（编译器必须能够推断出所有值的类型），因为 Go 语言是一种静态类型语言。</p><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><p>在必要以及可行的情况下，一个类型的值可以被转换成另一种类型的值。由于 <code>Go</code> 语言不存在隐式类型转换，因此所有的转换都必须显式说明，就像调用一个函数一样(类型在这里的作用可以看作是一种函数):</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">valueOfTypeB </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">typeB</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">valueOfTypeA</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 类型 B 的值 = 类型 B (类型 A 的值)</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5.0</span></span>
<span class="line"><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">int</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">需要注意的是</p><p>但这只能在定义正确的情况下转换成功。<br> 例如从一个取值范围较小的类型转换到一个取值范围较大的类型（例如将 int16 转换为 int32）。<br> 当从一个取值范围较大的转换到取值范围较小的类型时（例如将 int32 转换为 int16 或将 float32 转换为 int），会发生精度丢失（截断）的情况。<br> 当编译器捕捉到非法的类型转换时会引发编译时错误，否则将引发运行时错误。</p></div><p>具有相同底层类型的变量之间可以相互转换：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> a IZ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">int</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">d </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">IZ</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,46),o=[p];function t(c,r,i,d,y,C){return a(),n("div",null,o)}const A=s(l,[["render",t]]);export{u as __pageData,A as default};
