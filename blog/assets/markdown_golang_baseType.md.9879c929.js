import{_ as s,o as n,c as t,X as a}from"./chunks/framework.6bc268d3.js";const C=JSON.parse('{"title":"基本类型介绍","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/golang/baseType.md","filePath":"markdown/golang/baseType.md","lastUpdated":1692329948000}'),l={name:"markdown/golang/baseType.md"},e=a(`<h1 id="基本类型介绍" tabindex="-1">基本类型介绍 <a class="header-anchor" href="#基本类型介绍" aria-label="Permalink to &quot;基本类型介绍&quot;">​</a></h1><h2 id="数字类型命名" tabindex="-1">数字类型命名 <a class="header-anchor" href="#数字类型命名" aria-label="Permalink to &quot;数字类型命名&quot;">​</a></h2><p>Golang 更明确的数字类型命名，支持 Unicode，支持常用数据结构。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:center;">长度(字节)</th><th style="text-align:center;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">bool</td><td style="text-align:center;">1</td><td style="text-align:center;">false</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">byte</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:left;">uint8</td></tr><tr><td style="text-align:left;">rune</td><td style="text-align:center;">4</td><td style="text-align:center;">0</td><td style="text-align:left;">Unicode Code Point, int32</td></tr><tr><td style="text-align:left;">int, uint</td><td style="text-align:center;">4或8</td><td style="text-align:center;">0</td><td style="text-align:left;">32 或 64 位</td></tr><tr><td style="text-align:left;">int8, uint8</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:left;">-128 ~ 127, 0 ~ 255，byte是uint8 的别名</td></tr><tr><td style="text-align:left;">int16, uint16</td><td style="text-align:center;">2</td><td style="text-align:center;">0</td><td style="text-align:left;">-32768 ~ 32767, 0 ~ 65535</td></tr><tr><td style="text-align:left;">int32, uint32</td><td style="text-align:center;">4</td><td style="text-align:center;">0</td><td style="text-align:left;">-21亿~ 21亿, 0 ~ 42亿，rune是int32 的别名</td></tr><tr><td style="text-align:left;">int64, uint64</td><td style="text-align:center;">8</td><td style="text-align:center;">0</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">float32</td><td style="text-align:center;">4</td><td style="text-align:center;">0.0</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">float64</td><td style="text-align:center;">8</td><td style="text-align:center;">0.0</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">complex64</td><td style="text-align:center;">8</td><td style="text-align:center;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">complex128</td><td style="text-align:center;">16</td><td style="text-align:center;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">uintptr</td><td style="text-align:center;">4或8</td><td style="text-align:center;"></td><td style="text-align:left;">以存储指针的 uint32 或 uint64 整数</td></tr><tr><td style="text-align:left;">array</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:left;">值类型</td></tr><tr><td style="text-align:left;">struct</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:left;">值类型</td></tr><tr><td style="text-align:left;">string</td><td style="text-align:center;"></td><td style="text-align:center;">&quot;&quot;</td><td style="text-align:left;">UTF-8 字符串</td></tr><tr><td style="text-align:left;">slice</td><td style="text-align:center;"></td><td style="text-align:center;">nil</td><td style="text-align:left;">引用类型</td></tr><tr><td style="text-align:left;">map</td><td style="text-align:center;"></td><td style="text-align:center;">nil</td><td style="text-align:left;">引用类型</td></tr><tr><td style="text-align:left;">channel</td><td style="text-align:center;"></td><td style="text-align:center;">nil</td><td style="text-align:left;">引用类型</td></tr><tr><td style="text-align:left;">interface</td><td style="text-align:center;"></td><td style="text-align:center;">nil</td><td style="text-align:left;">接口</td></tr><tr><td style="text-align:left;">function</td><td style="text-align:center;"></td><td style="text-align:center;">nil</td><td style="text-align:left;">函数</td></tr></tbody></table><p>支持八进制、 六进制，以及科学记数法。标准库 math 定义了各数字类型取值范围。</p><p><code>a, b, c, d := 071, 0x1F, 1e9, math. MinInt16</code></p><p>空指针值 nil，而非C/C++ NULL</p><h2 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-label="Permalink to &quot;整型&quot;">​</a></h2><p>整型分为以下两个大类： 按长度分为： <code>int8</code> 、 <code>int16</code> 、 <code>int32</code> 、 <code>int64</code> 对应的无符号整型： <code>uint8</code> 、 <code>uint16</code> 、 <code>uint32</code> 、 <code>uint64</code></p><p>其中， <code>uint8</code> 就是我们熟知的 <code>byte</code> 型， <code>int16</code> 对应C语言中的 <code>short</code> 型，int64对应C语言中的 <code>long</code> 型</p><h2 id="浮点型" tabindex="-1">浮点型 <a class="header-anchor" href="#浮点型" aria-label="Permalink to &quot;浮点型&quot;">​</a></h2><p>Go语言支持两种浮点型数： <code>float32</code> 和 <code>float64</code> 。</p><p>这两种浮点型数据格式遵循 <code>IEEE 754</code> 标准：</p><p><code>float32</code> 的浮点数的最大范围约为 <code>3.4e38</code> ，可以使用常量定义： <code>math.MaxFloat32</code> 。</p><p><code>float64</code> 的浮点数的最大范围约为 <code>1.8e308</code> ，可以使用一个常量定义： <code>math.MaxFloat64</code> 。</p><h2 id="复数" tabindex="-1">复数 <a class="header-anchor" href="#复数" aria-label="Permalink to &quot;复数&quot;">​</a></h2><p><code>complex64</code> 和 <code>complex128</code></p><p>复数有实部和虚部，complex64的实部和虚部为32位，complex128的实部和虚部为64位。</p><h2 id="布尔值" tabindex="-1">布尔值 <a class="header-anchor" href="#布尔值" aria-label="Permalink to &quot;布尔值&quot;">​</a></h2><p>Go语言中以 <code>bool</code> 类型进行声明布尔型数据，布尔型数据只有 <code>true</code> （真）和 <code>false</code> （假）两个值。</p><div class="info custom-block"><p class="custom-block-title">注意</p><ul><li>布尔类型变量的默认值为false。</li><li>Go 语言中不允许将整型强制转换为布尔型.</li><li>布尔型无法参与数值运算，也无法与其他类型进行转换。</li></ul></div><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><p>Go语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型（int、bool、float32、float64 等）一样。 Go 语言里的字符串的内部实现使用UTF-8编码。 字符串的值为双引号(&quot;)中的内容，可以在Go语言的源码中直接添加非ASCII码字符，例如：</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">s1 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">s2 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">你好</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="字符串转义符" tabindex="-1">字符串转义符 <a class="header-anchor" href="#字符串转义符" aria-label="Permalink to &quot;字符串转义符&quot;">​</a></h2><p>Go 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。</p><table><thead><tr><th style="text-align:center;">转义</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center;">\\r</td><td>回车符（返回行首）</td></tr><tr><td style="text-align:center;">\\n</td><td>换行符（直接跳到下一行的同列位置）</td></tr><tr><td style="text-align:center;">\\t</td><td>制表符</td></tr><tr><td style="text-align:center;">&#39;</td><td>单引号</td></tr><tr><td style="text-align:center;">&quot;</td><td>双引号</td></tr><tr><td style="text-align:center;">\\</td><td>反斜杠</td></tr></tbody></table><p>举个例子，我们要打印一个Windows平台下的一个文件路径：</p><div class="language-Go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">str := </span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">c:</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">pprof</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">main.exe</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="多行字符串" tabindex="-1">多行字符串 <a class="header-anchor" href="#多行字符串" aria-label="Permalink to &quot;多行字符串&quot;">​</a></h2><p>Go语言中要定义一个多行字符串时，就必须使用 <code>反引号</code> 字符：</p><div class="language-Go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">s1 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">第一行</span></span>
<span class="line"><span style="color:#C3E88D;">    第二行</span></span>
<span class="line"><span style="color:#C3E88D;">    第三行</span></span>
<span class="line"><span style="color:#C3E88D;">    </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s1</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。</p><table><thead><tr><th>方法</th><th>介绍</th></tr></thead><tbody><tr><td>len(str)</td><td>求长度</td></tr><tr><td>+或fmt. Sprintf</td><td>拼接字符串</td></tr><tr><td>strings. Split</td><td>分割</td></tr><tr><td>strings. Contains</td><td>判断是否包含</td></tr><tr><td>strings. HasPrefix, strings. HasSuffix</td><td>前缀/后缀判断</td></tr><tr><td>strings. Index(), strings. LastIndex()</td><td>子串出现的位置</td></tr><tr><td>strings. Join(a[]string, sep string)</td><td>join操作</td></tr></tbody></table><h2 id="byte和rune类型" tabindex="-1">byte和rune类型 <a class="header-anchor" href="#byte和rune类型" aria-label="Permalink to &quot;byte和rune类型&quot;">​</a></h2><p>组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号（’）包裹起来，如：</p><div class="language-Go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">中</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Go 语言的字符有以下两种：</p><ul><li>uint8类型，或者叫 byte 型，代表了ASCII码的一个字符。</li><li>rune类型，代表一个 UTF-8字符。</li></ul><p>当需要处理中文、日文或者其他复合字符时，则需要用到rune类型。rune类型实际是一个int32。 Go 使用了特殊的 rune 类型来处理 Unicode，让基于 Unicode的文本处理更为方便，也可以使用 byte 型进行默认字符串处理，性能和扩展性都有照顾</p><div class="language-Go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 遍历字符串</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">traversalString</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        s </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pprof.cn博客</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//byte</span></span>
<span class="line"><span style="color:#A6ACCD;">            fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%v(%c) </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//rune</span></span>
<span class="line"><span style="color:#A6ACCD;">            fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%v(%c) </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>输出：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">112(p) 112(p) 114(r) 111(o) 102(f) 46(.) 99(c) 110(n) 229(å) 141() 154() 229(å) 174(®) 162(¢) </span></span>
<span class="line"><span style="color:#A6ACCD;">  112(p) 112(p) 114(r) 111(o) 102(f) 46(.) 99(c) 110(n) 21338(博) 23458(客)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>因为UTF8编码下一个中文汉字由3~4个字节组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串，否则就会出现上面输出中第一行的结果。</p><p>字符串底层是一个byte数组，所以可以和[]byte类型相互转换。字符串是不能修改的 字符串是由byte字节组成，所以字符串的长度是byte字节的长度。 rune类型用来表示utf8字符，一个rune字符由一个或多个byte组成</p><h2 id="修改字符串" tabindex="-1">修改字符串 <a class="header-anchor" href="#修改字符串" aria-label="Permalink to &quot;修改字符串&quot;">​</a></h2><p>要修改字符串，需要先将其转换成 <code>[]rune</code> 或 <code>[]byte</code> ，完成后再转换为 <code>string</code> 。无论哪种转换，都会重新分配内存，并复制字节数组。</p><div class="language-Go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">changeString</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        s1 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// 强制类型转换</span></span>
<span class="line"><span style="color:#A6ACCD;">        byteS1 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#82AAFF;">byte</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        byteS1</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">H</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">string</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">byteS1</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        s2 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">博客</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        runeS2 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#82AAFF;">rune</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        runeS2</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">狗</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">string</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">runeS2</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><p>Go语言中只有强制类型转换，没有隐式类型转换。该语法只能在两个类型之间支持相互转换的时候使用。</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">T</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">表达式</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中，T表示要转换的类型。表达式包括变量、复杂算子和函数返回值等.</p><p>比如计算直角三角形的斜边长时使用math包的Sqrt()函数，该函数接收的是float64类型的参数，而变量a和b都是int类型的，这个时候就需要将a和b强制类型转换为float64类型。</p><div class="language-Go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sqrtDemo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> c </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// math.Sqrt()接收的参数是float64类型，需要强制转换</span></span>
<span class="line"><span style="color:#A6ACCD;">        c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">int</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Sqrt</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">float64</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">)))</span></span>
<span class="line"><span style="color:#A6ACCD;">        fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,54),p=[e];function o(r,c,i,d,y,D){return n(),t("div",null,p)}const A=s(l,[["render",o]]);export{C as __pageData,A as default};
