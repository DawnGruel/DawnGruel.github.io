import{_ as t,o as e,c as l,X as a}from"./chunks/framework.6bc268d3.js";const f=JSON.parse('{"title":"运算符","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/golang/operator.md","filePath":"markdown/golang/operator.md","lastUpdated":1692329948000}'),d={name:"markdown/golang/operator.md"},r=a('<h1 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h1><p>Go语言内置的运算符有：</p><blockquote><p>算术运算符<br> 关系运算符<br> 逻辑运算符<br> 位运算符<br> 赋值运算符</p></blockquote><h2 id="算术运算符" tabindex="-1">算术运算符 <a class="header-anchor" href="#算术运算符" aria-label="Permalink to &quot;算术运算符&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:left;">相加</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:left;">相减</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:left;">相乘</td></tr><tr><td style="text-align:center;">/</td><td style="text-align:left;">相除</td></tr><tr><td style="text-align:center;">%</td><td style="text-align:left;">求余</td></tr></tbody></table><blockquote><p>注意：++（自增）和--（自减）在Go语言中是单独的语句，并不是运算符。</p></blockquote><h2 id="关系运算符" tabindex="-1">关系运算符 <a class="header-anchor" href="#关系运算符" aria-label="Permalink to &quot;关系运算符&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">==</td><td style="text-align:left;">检查两个值是否相等，如果相等返回True否则返回False</td></tr><tr><td style="text-align:center;">!=</td><td style="text-align:left;">检查两个值是否不相等，如果不相等返回True否则返回False</td></tr><tr><td style="text-align:center;">&gt;</td><td style="text-align:left;">检查左边值是否大于右边值，如果是返回 True 否则返回 False</td></tr><tr><td style="text-align:center;">&gt;=</td><td style="text-align:left;">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False</td></tr><tr><td style="text-align:center;">&lt;</td><td style="text-align:left;">检查左边值是否小于右边值，如果是返回 True 否则返回 False</td></tr><tr><td style="text-align:center;">&lt;=</td><td style="text-align:left;">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False</td></tr></tbody></table><h2 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">&amp;&amp;</td><td style="text-align:left;">逻辑 AND 运算符。 如果两边的操作数都是 True，则为 True，否则为 False</td></tr><tr><td style="text-align:center;">||</td><td style="text-align:left;">逻辑 OR 运算符。 如果两边的操作数有一个 True，则为 True，否则为 False</td></tr><tr><td style="text-align:center;">!</td><td style="text-align:left;">逻辑 NOT 运算符。 如果条件为 True，则为 False，否则为 True</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">&amp;</td><td style="text-align:left;">参与运算的两数各对应的二进位相与。（两位均为1才为1）</td></tr><tr><td style="text-align:center;">l</td><td style="text-align:left;">参与运算的两数各对应的二进位相或。（两位有一个为1就为1）</td></tr><tr><td style="text-align:center;">^</td><td style="text-align:left;">参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。（两位不一样则为1）</td></tr><tr><td style="text-align:center;">&lt;&lt;</td><td style="text-align:left;">左移n位就是乘以2的n次方。 <code>a&lt;&lt;b</code> 是把a的各二进位全部左移b位，高位丢弃，低位补0</td></tr><tr><td style="text-align:center;">&gt;&gt;</td><td style="text-align:left;">右移n位就是除以2的n次方。 <code>a&gt;&gt;b</code> 是把a的各二进位全部右移b位</td></tr></tbody></table><h2 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">=</td><td style="text-align:left;">简单的赋值运算符，将一个表达式的值赋给一个左值</td></tr><tr><td style="text-align:center;">+=</td><td style="text-align:left;">相加后再赋值</td></tr><tr><td style="text-align:center;">-=</td><td style="text-align:left;">相减后再赋值</td></tr><tr><td style="text-align:center;">*=</td><td style="text-align:left;">相乘后再赋值</td></tr><tr><td style="text-align:center;">/=</td><td style="text-align:left;">相除后再赋值</td></tr><tr><td style="text-align:center;">%=</td><td style="text-align:left;">求余后再赋值</td></tr><tr><td style="text-align:center;">&lt;&lt;=</td><td style="text-align:left;">左移后赋值</td></tr><tr><td style="text-align:center;">&gt;&gt;=</td><td style="text-align:left;">右移后赋值</td></tr><tr><td style="text-align:center;">&amp;=</td><td style="text-align:left;">按位与后赋值</td></tr><tr><td style="text-align:center;">l=</td><td style="text-align:left;">按位或后赋值</td></tr><tr><td style="text-align:center;">^=</td><td style="text-align:left;">按位异或后赋值</td></tr></tbody></table>',13),n=[r];function s(i,g,o,y,x,c){return e(),l("div",null,n)}const b=t(d,[["render",s]]);export{f as __pageData,b as default};
